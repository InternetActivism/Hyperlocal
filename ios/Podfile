require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, min_ios_version_supported
prepare_react_native_project!
# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled
linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'Hyperlocal' do
  config = use_native_modules!
  
  pod 'Firebase', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true
  $RNFirebaseAsStaticFramework = true

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Permissions
  permissions_path = '../node_modules/react-native-permissions/ios'
  pod 'Permission-BluetoothPeripheral', :path => "#{permissions_path}/BluetoothPeripheral"


  target 'HyperlocalTests' do
    inherit! :complete
    # Pods for testing
  end

  # post_install do |installer|
  #   find_and_replace("../node_modules/react-native/React/Base/RCTKeyCommands.m",
  #   "_modifierFlags",
  #   "_modifierEventFlags")
  #   find_and_replace("../node_modules/react-native/React/Base/RCTKeyCommands.m",
  #       "_modifiedInput",
  #       "_modifiedEventInput")
  #   find_and_replace("../node_modules/react-native/React/Base/RCTKeyCommands.m",
  #       "_isKeyDown",
  #       "_isKeyEventDown")
  #   find_and_replace("../node_modules/react-native/React/DevSupport/RCTPackagerClient.h",
  #       "handleNotification",
  #       "handlePackageNotification")

  #   find_and_replace("../node_modules/react-native/React/DevSupport/RCTPackagerConnection.mm",
  #       "handleNotification",
  #       "handlePackageNotification")

  #   react_native_post_install(
  #     installer,
  #     # Set `mac_catalyst_enabled` to `true` in order to apply patches
  #     # necessary for Mac Catalyst builds
  #     :mac_catalyst_enabled => false
  #   )
  #   __apply_Xcode_12_5_M1_post_install_workaround(installer)
  # end
end

# def find_and_replace(dir, findstr, replacestr)
#   Dir[dir].each do |name|
#       text = File.read(name)
#       replace = text.gsub(findstr,replacestr)
#       if text != replace
#           puts "Fix: " + name
#           File.open(name, "w") { |file| file.puts replace }
#           STDOUT.flush
#       end
#   end
#   Dir[dir + '*/'].each(&method(:find_and_replace))
# end
